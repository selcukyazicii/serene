{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/User/UserPage.ts", "../../../../../Modules/Administration/User/UserGrid.ts", "../../../../../Modules/Administration/UserPermission/UserPermissionDialog.ts", "../../../../../Modules/Administration/User/UserDialog.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from \"@serenity-is/corelib/q\"\nimport { UserGrid } from \"./UserGrid\";\n\n$(function() {\n    initFullHeightGridPage(new UserGrid($('#GridDiv')).element);\n});", "import { Decorators, EntityGrid } from \"@serenity-is/corelib\";\r\nimport { resolveUrl, tryFirst } from \"@serenity-is/corelib/q\";\r\nimport { RoleRow, UserColumns, UserRow, UserService } from \"../\";\nimport { UserDialog } from \"./UserDialog\";\n\n@Decorators.registerClass()\nexport class UserGrid extends EntityGrid<UserRow, any> {\n    protected getColumnsKey() { return UserColumns.columnsKey; }\n    protected getDialogType() { return UserDialog; }\n    protected getIdProperty() { return UserRow.idProperty; }\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\n    protected getService() { return UserService.baseUrl; }\n\n    constructor(container: JQuery) {\n        super(container);\n    }\n\n    protected getDefaultSortBy() {\n        return [UserRow.Fields.Username];\n    }\n\n    protected getColumns() {\n        var columns = super.getColumns();\n\n        var roles = tryFirst(columns, x => x.field == UserRow.Fields.Roles);\n        if (roles) {\n            roles.format = ctx => {\n                var roleList = (ctx.value || []).map(x => (RoleRow.getLookup().itemById[x] || {}).RoleName || \"\");\n                roleList.sort();\n                return roleList.join(\", \");\n            };\n        }\n\n        return columns;\n    }\n}\n", "import { Decorators, TemplatedDialog } from \"@serenity-is/corelib\";\nimport { format, getRemoteData, notifySuccess, localText } from \"@serenity-is/corelib/q\";\nimport { UserPermissionService } from \"../\";\nimport { PermissionCheckEditor } from \"./PermissionCheckEditor\";\n\nexport class UserPermissionDialog extends TemplatedDialog<UserPermissionDialogOptions> {\n\n    private permissions: PermissionCheckEditor;\n\n    constructor(opt: UserPermissionDialogOptions) {\n        super(opt);\n\n        this.permissions = new PermissionCheckEditor(this.byId('Permissions'), {\n            showRevoke: true\n        });\n\n        UserPermissionService.List({\n            UserID: this.options.userID,\n            Module: null,\n            Submodule: null\n        }, response => {\n            this.permissions.value = response.Entities;\n        });\n\n        UserPermissionService.ListRolePermissions({\n            UserID: this.options.userID,\n            Module: null,\n            Submodule: null,\n        }, response => {\n            this.permissions.rolePermissions = response.Entities;\n        });\n\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\n        this.dialogTitle = format(localText('Site.UserPermissionDialog.DialogTitle'),\n            this.options.username);\n    }\n\n    protected getDialogButtons() {\n        return [\n            {\n                text: localText('Dialogs.OkButton'),\n                cssClass: 'btn btn-primary',\n                click: e => {\n                    UserPermissionService.Update({\n                        UserID: this.options.userID,\n                        Permissions: this.permissions.value,\n                        Module: null,\n                        Submodule: null\n                    }, response => {\n                        this.dialogClose();\n                        window.setTimeout(() => notifySuccess(localText('Site.UserPermissionDialog.SaveSuccess')), 0);\n                    });\n                }\n            }, {\n                text: localText('Dialogs.CancelButton'),\n                click: () => this.dialogClose()\n            }\n        ];\n    }\n\n    protected getTemplate(): string {\n        return '<div id=\"~_Permissions\"></div>';\n    }\n}\n\nexport interface UserPermissionDialogOptions {\n    userID?: number;\n    username?: string;\n}\n", "import { UserForm, UserRow, UserService } from \"../\";\nimport { UserPermissionDialog } from \"../UserPermission/UserPermissionDialog\";\nimport { Decorators, EditorUtils, EntityDialog } from \"@serenity-is/corelib\"\nimport { format, localText } from \"@serenity-is/corelib/q\";\nimport { Texts } from \"@/ServerTypes/Texts\";\n\n@Decorators.registerClass()\nexport class UserDialog extends EntityDialog<UserRow, any> {\n    protected getFormKey() { return UserForm.formKey; }\n    protected getIdProperty() { return UserRow.idProperty; }\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\n    protected getNameProperty() { return UserRow.nameProperty; }\n    protected getService() { return UserService.baseUrl; }\n\n    protected form = new UserForm(this.idPrefix);\n\n    constructor() {\n        super();\n\n        this.form.Password.change(() => {\n            EditorUtils.setRequired(this.form.PasswordConfirm, this.form.Password.value.length > 0);\n        });\n\n        this.form.Password.addValidationRule(this.uniqueName, e => {\n            if (this.form.Password.value.length < 6)\n                return format(localText(Texts.Validation.MinRequiredPasswordLength), 6);\n        });\n\n        this.form.PasswordConfirm.addValidationRule(this.uniqueName, e => {\n            if (this.form.Password.value != this.form.PasswordConfirm.value)\n                return localText(Texts.Validation.PasswordConfirmMismatch);\n        });\n    }\n\n    protected getToolbarButtons()\n    {\n        let buttons = super.getToolbarButtons();\n\n        buttons.push({\n            title: localText(Texts.Site.UserDialog.EditPermissionsButton),\n            cssClass: 'edit-permissions-button',\n            icon: 'fa-lock text-green',\n            onClick: () =>\n            {\n                new UserPermissionDialog({\n                    userID: this.entity.UserId,\n                    username: this.entity.Username\n                }).dialogOpen();\n            }\n        });\n\n        return buttons;\n    }\n\n    protected updateInterface() {\n        super.updateInterface();\n\n        this.toolbar.findButton(\"edit-permissions-button\").toggleClass(\"disabled\", this.isNewOrDeleted());\n    }\n\n    protected afterLoadEntity() {\n        super.afterLoadEntity();\n\n        // these fields are only required in new record mode\n        this.form.Password.element.toggleClass('required', this.isNew())\n            .closest('.field').find('sup').toggle(this.isNew());\n        this.form.PasswordConfirm.element.toggleClass('required', this.isNew())\n            .closest('.field').find('sup').toggle(this.isNew());\n    }\n}\n"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_corelib", "import_q", "UserPermissionDialog", "opt", "PermissionCheckEditor", "UserPermissionService", "response", "e", "__name", "import_corelib", "import_q", "UserDialog", "UserForm", "e", "Texts", "UserRow", "UserService", "buttons", "UserPermissionDialog", "__name", "__decorateClass", "UserGrid", "UserColumns", "UserDialog", "UserRow", "UserService", "container", "columns", "roles", "x", "ctx", "roleList", "RoleRow", "__name", "__decorateClass", "UserGrid"]
}
